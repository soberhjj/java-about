视频教程：https://www.bilibili.com/video/BV1G4411c7N4?p=140
鸭子项目
需求：有各种鸭子（如野鸭、家鸭、玩具鸭等），鸭子有各种行为（比如叫、飞等）。需求就是显示鸭子的信息

传统方式解决鸭子问题分析和解决方案（代码见tradition包）
1.所有具体鸭子类都继承抽象鸭子类Duck,这样所有的鸭子都有抽象类中的fly方法，而抽象类中fly方法表示鸭子会飞，因此所有继承Duck的鸭子都能飞，这是不正确的，就比如家鸭就不会飞。
2.上面1中所描述的问题其实是继承带来的问题：对类的局部改动，尤其是超类的局部改动，会影响其他部分，也就是会有溢出效应。
3.为了解决1中所描述的问题，在家鸭中可以通过覆盖（也就是重写）fly方法来解决。
4.问题又来了，又有了个玩具鸭，而玩具鸭既不会游泳也不会飞，所以在玩具鸭中要覆盖swim方法和fly方法。

针对上述问题，我们可以使用策略模式来解决，策略模式解决方式的本质就是将继承换成组合或聚合来解决。

策略模式基本介绍：
1.策略模式中定义算法族并分别封装起来，让它们之间可以相互替换，此模式让算法的变化独立与使用算法的客户。
2.策略模式体现了几个设计原则。第一：把变化的代码从不变的代码中分离出来;第二：针对接口编程而不是具体类（定义了策略接口）；
  第三：多用组合、聚合，少用继承（客户通过组合方式使用策略）

策略模式解决鸭子问题（代码见strategy包）

在JDK的Arrays的Comparator就使用了策略模式

